import java.lang.*;
import java.util.*;
/**
 * 
 */

/**
 * 
 */
public class Proj1 extends Proj1_methods{

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		
		Scanner scan = new Scanner(System.in);
		
		int commas = 0;
		
		System.out.println("Please enter the names, seperated by commas, brah: ");
		
		System.out.println();
		
		String names = scan.nextLine();
		
		int decision = -1;
		
		while(decision != 0)
		{
			printMenu();
			
			decision = scan.nextInt();
			scan.nextLine();
			System.out.println();
					
			
			switch (decision)
			{
			case 1:
			//display list ordered
				for(int i = 0; i < SortNames(names).length; i++)
				{
					System.out.println(SortNames(names)[i]);
				}
				System.out.println();
				break;
			case 2:
			//display full names
				if(FullNames(names).length == 0)
				{
					System.out.println("No full names to display.");
				}
				else
				{
				for(int i = 0; i < FullNames(names).length; i++)
				{
					System.out.println(FullNames(names)[i]);
				}
				}
				System.out.println();
				break;
			case 3:
			//display single names
				if(SingleNames(names).isEmpty())
				{
					System.out.println("No single names to display.");
				}
				
				else
				{
				for(int i = 0; i < SingleNames(names).size(); i++)
				{
						System.out.println(SingleNames(names).get(i));
					
				}
				}
				System.out.println();
				break;
			case 4:
			//display name statistics
				nameStats(names);
				System.out.println();
				break;
			case 5:
			//display even names
				if(EvenNames(names).length == 0)
				{
					System.out.println("No even names to display.\n");
				}
				
				else
				{
				for(int i = 0; i < EvenNames(names).length; i++)
				{
					System.out.println(EvenNames(names)[i]);
				}
				}
				System.out.println();
				break;
			case 6:
			//display odd names
				if(OddNames(names).length == 0)
				{
					System.out.println("No odd names to display.");
				}
				
				else 
				{
				for(int i = 0; i < OddNames(names).length; i++)
				{
					System.out.println(OddNames(names)[i]);
				}
				}
				System.out.println();
				break;
			case 7:
			//display not capitalized
				if(NotCapital(names).isEmpty())
				{
					System.out.println("No non-capital names to display");
				}
				for(int i = 0; i < NotCapital(names).size(); i++)
				{
					System.out.println(NotCapital(names).get(i));
				}
				System.out.println();
				break;
			case 8:
			//display most frequent
				System.out.println(MostFrequent(names)); 
				System.out.println();
				break;
			case 9:
			//enter new list
				System.out.println("Enter the new list, seperated by commas: ");
				names = scan.nextLine();
				break;
			case 0:
			//quit program
				System.out.println("Hopefully this program worked");
				break;
			default:
				System.out.println("Please enter a valid number or 0 to quit");
			}
		}
		
		
		scan.close();
		
		//end main
	}


//this is now a seperate class I used to store all my methods

import java.util.ArrayList;
import java.lang.*;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Scanner;

public class Proj1_methods{
	
public static void printMenu()
	{
		System.out.println("1: Display List Ordered");
		System.out.println("2: Display Full Names");
		System.out.println("3: Display Single Names");
		System.out.println("4: Display Name Statistics");
		System.out.println("5: Display Names with Even Length");
		System.out.println("6: Display Names with Odd Length");
		System.out.println("7: Display Names not Capitalized");
		System.out.println("8: Display Most Frequent Name");
		System.out.println("9: Enter new list of Names");
		System.out.println("0: Quit Program ");
		
	}
	
public static String[] SortNames(String names)
	{
		
		
		String[] newNames = names.split(",");
		
		Arrays.sort(newNames, String.CASE_INSENSITIVE_ORDER);
		
		return newNames;
	}
	
public static String[] FullNames(String name)
	{
		String[] names = name.split(",");
		
		int count = 0;
		for (int i = 0; i < names.length; i++)
		{
			if (names[i].contains(" "))
			{
				count++;
			}
				
		}
		
		String[] newNames = new String[count];
		
		int counts = 0;
		
		for (int i = 0; i < names.length; i++)
		{
			if (names[i].contains(" "))
			{
				newNames[counts] = names[i];
				counts++;
			}
				
		}
		
		return newNames;
	}
	//trim here
public static String[] SingleNames(String[] names)
	{
		int count = 0;
		for (int i = 0; i < names.length; i++)
		{
			if (!names[i].contains(" "))
			{
				count++;
			}
			
		}
		
		String[] simpleNames = new String[count];
		
		for (int i = 0; i < names.length; i++)
		{
			if (!names[i].contains(" "))
			{
				simpleNames[i] = names[i];
			}
				
		}
		
		return simpleNames;
	}

public static String[] EvenNames(String names)
	{
		String[] splitter = new String[names.length()];
		
		int count = 0;
		
		splitter = names.split(",");
		
		for (int i = 0; i < splitter.length; i++)
		{
			int length = splitter[i].length();
			if(splitter[i].contains(" "))
			{
				length-=1;
				if(length % 2 == 0)
				{
					count++;
				}
			}
			else if(splitter[i].length() % 2 == 0)
			{
				count++;
			}
		}
		
		int countTwo = 0;
		
		String[] even = new String[count];
		
		for (int i = 0; i < splitter.length; i++)
		{
			int length = splitter[i].length();
			if(splitter[i].contains(" "))
			{
				length-=1;
				if (length % 2 == 0)
				{
					even[countTwo] = splitter[i];
					countTwo++;
				}
			}
			else if (splitter[i].length() % 2 == 0)
			{
				even[countTwo] = splitter[i];
				countTwo++;
			}
		}
		
		return even;
	}
	
public static String[] OddNames(String names)
	{
		String[] splitter = names.split(",");;
		
		int count = 0;
		
		//splitter = names.split(" ");
		
		for (int i = 0; i < splitter.length; i++)
		{
			int length = splitter[i].length();
			if(splitter[i].contains(" "))
			{
				length-=1;
				if(length % 2 != 0)
				{
					count++;
				}
			}
			else if(splitter[i].length() % 2 != 0)
			{
				count++;
			}
		}
		
		String[] odd = new String[count];
		
		int countTwo = 0;
		
		for (int i = 0; i < splitter.length; i++)
		{
			int length = splitter[i].length();
			if(splitter[i].contains(" "))
			{
				length-=1;
				if (length % 2 != 0)
				{
					odd[countTwo] = splitter[i];
					countTwo++;
				}
			}
			else if (splitter[i].length() % 2 != 0)
			{
				odd[countTwo] = splitter[i];
				countTwo++;
			}
		}
		
		return odd;
	}
	
public static void PrintThings(String[] names)
	{
		for (int i = 0; i < names.length; i++)
		{
			System.out.println(names[i]);
		}
	}
	
public static ArrayList<String> NotCapital(String[] names)
	{
		ArrayList<String> not = new ArrayList<>();
		
		String alphabet = "ABCDEFGHIJKLMNOPQRSTUVWKYZ";
		
		for(int i = 0; i < names.length; i++)
		{
			for (int j = 0; j < names[i].length(); j++)
			{
				for (int ii = 0; ii < alphabet.length(); ii++)
				{
					if (names[i].contains(alphabet.substring(ii,ii+1)))
					{
						break;
					}
					if(ii == alphabet.length()-1)
					{
						not.add(names[i]);
					}
				}
			}
		}
		
		
		return not;
	}

public static String MostFrequent(String names)
{
	String name ="";
	String none = "No most frequent name";
	
	ArrayList<TwoD> holder = new ArrayList<>();
	
	String[] hold = names.split(",");
	
	for (int i = 0; i < hold.length;i++)
	{
		TwoD d = new TwoD();
		
		d.setName(hold[i]);
		holder.add(d);
	}
	
	for(int ii = 0; ii < hold.length; ii++)
	{
		int count = 0;
		for (int j = 0; j < hold.length; j++)
		{
			//tolower these then compare
			if(hold[ii].equals(hold[j]))
			{
				count++;
			}
		}
		holder.get(ii).setOccurance(count);
	}
	
	//reference for largest
	
	int holdName = 1;//holder.get(0).getOccurance();
	TwoD temp = holder.get(0);
	
	for (int i = 0; i < holder.size(); i++)
	{
		if(holder.get(i).getOccurance() > holdName)
		{
			name = holder.get(i).getName();
			temp = holder.get(i);
		}
	}
	
	name = temp.getName();
	
	if (holdName == 1)
	{
		return none;
	}
	else
	return name;
}


public static void newList(Scanner scan, String names)
{
	names = scan.nextLine();
}

public static void nameStats(String names)
{
	
	int numberNames = 0;
	int letterCount = 0;
	double averageLen = 0;
	String shortest = "";
	String longest = "";
	double deviation = 0;
	
	String[] splitter = names.split(",");
	numberNames = splitter.length;
	for(int i = 0; i < names.length(); i++)
	{
		if(Character.isAlphabetic(names.charAt(i)))
		{
			letterCount++;
		}
	}
	
	averageLen = ((double) letterCount) / ((double)numberNames);
	String hold = splitter[0];
	
	
	//determines the shortest name
	for(int i = 1; i < splitter.length; i++)
	{
		int counter = 0;
		for(int j = 0; j < splitter[i].length(); j++)
		{
			if(Character.isAlphabetic(splitter[i].charAt(j)))
			{
				counter++;
			}
		}
		if (counter < hold.length())
		{
			hold = splitter[i];
		}
	}
	
	shortest = hold;
	
	String secondHold = splitter[0];
	
	
	//determines the longest name
	for(int i = 1; i < splitter.length; i++)
	{
		int counter = 0;
		for(int j = 0; j < splitter[i].length(); j++)
		{
			if(Character.isAlphabetic(splitter[i].charAt(j)))
			{
				counter++;
			}
		}
		if (counter > secondHold.length())
		{
			secondHold = splitter[i];
		}
	}
	
	longest = secondHold;
	
	
	//assigns each length of a name to be later divided
	double lengths = 0;
	double[] nameLens = new double[splitter.length];
	for(int i = 0; i < splitter.length; i++)
	{
		double count = 0;
		for(int j = 0; j < splitter[i].length(); j++)
		{
			if(Character.isAlphabetic(splitter[i].charAt(j)))
			{
				count++;
			}
		}
		nameLens[i] = count;
		lengths+=count;
	}
	
	double average = lengths / ((double)splitter.length);
	
	
	//from here to line 357 the computation for standard dev is calculated
	for(int i = 0; i< nameLens.length; i++)
	{
		nameLens[i]-= average;
	}
	
	for(int i = 0; i< nameLens.length; i++)
	{
		nameLens[i]*= nameLens[i];
	}
	
	double addedDevs = 0;
	
	for(int i = 0; i < nameLens.length; i++)
	{
		addedDevs+= nameLens[i];
	}
	
	double devsDivided = addedDevs / splitter.length;
	
	deviation = Math.sqrt(devsDivided);
	
	
	
	System.out.println("Name Count: " + numberNames);
	System.out.println("Letter Count Total: " + letterCount);
	System.out.printf("Avg Name Length: %.2f\n", averageLen);
	System.out.println("Shortest Name: " + shortest);
	System.out.println("Longest Name: " + longest);
	System.out.printf("Population Standard Deviation: %.2f\n", deviation);
	
}
	
	
	
}


